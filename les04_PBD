SELECT AVG(salary), MAX(salary),
MIN(salary), SUM(salary)
FROM hr.employees
WHERE job_id LIKE '%REP%';

SELECT MIN(hire_date), MAX(hire_date)
FROM hr.employees;

--menghitung dalam 1 tabel ada berapa data
SELECT COUNT(*)
FROM hr.employees
WHERE department_id = 50;

-- menampilkan yang tidak null
SELECT COUNT(commission_pct)
FROM hr.employees
WHERE department_id = 80;

--menghitung distinc non null value
SELECT COUNT(DISTINCT department_id)
FROM hr.employees;

--average ignore null value
SELECT AVG(commission_pct)
FROM hr.employees; --nullnya tidak dihitung, jadi total data commissionnya / 35

--average nvl force to iclude null value
SELECT AVG(NVL(commission_pct, 0))
FROM hr.employees; --nullnya dihitung(menghitung data dalam satu tabel), jadi total data commissionnya / 45


--GROUP BY
-- 1. Tampilkan rata rata gaji tiap departement
-- setiap field yang tidak ada fungsi agregat diletakan di grup by *hrs ya, kalo ga eror
SELECT first_name, AVG(salary)
FROM hr.employees
GROUP BY department_id, first_name ;   --/jgn lupa y:)

--di grup by gabole pake alias
SELECT department_id AS dept_id, job_id, SUM(salary)
FROM hr.employees
GROUP BY department_id, job_id ;

--pengkondisian fungsi agregat tidak boleh disimpan di where, peletakannya harus di having, setelah group by
--SELECT department_id, AVG(salary)
--FROM employees
--WHERE AVG(salary) > 8000  -- ini eror
--GROUP BY department_id;    

SELECT department_id, MAX(salary)
FROM hr.employees
GROUP BY department_id
HAVING MAX(salary)>10000 ;

-- having itu untuk pengkondisian yang memiliki fungsi agregat

SELECT job_id, salary, SUM(salary) PAYROLL
FROM hr.employees
WHERE job_id NOT LIKE '%REP%'
GROUP BY job_id, salary
HAVING SUM(salary) > 13000
ORDER BY SUM(salary);

--Nesting
SELECT MAX(AVG(salary))
FROM hr.employees
GROUP BY department_id;
